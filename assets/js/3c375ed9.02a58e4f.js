"use strict";(self.webpackChunkdocus=self.webpackChunkdocus||[]).push([[4744],{1405:(n,o,e)=>{e.r(o),e.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"pools/back-end/sdk/collateral-pool","title":"Collateral Pool Contract","description":"The Defactor SDK provides utilities and classes to seamless interaction with the Defactor contracts. In this specific section, the focus is in the Collateral Pool Contract and ERC20CollateralPoolV2 class, which implements the fundamental methods to interact with the contract in question.","source":"@site/docs/pools/back-end/sdk/collateral-pool.md","sourceDirName":"pools/back-end/sdk","slug":"/pools/back-end/sdk/collateral-pool","permalink":"/docs/pools/back-end/sdk/collateral-pool","draft":false,"unlisted":false,"editUrl":"https://github.com/defactor-com/documentation/tree/main/docs/pools/back-end/sdk/collateral-pool.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Collateral Pool Contract","sidebar_position":2},"sidebar":"docSidebar","previous":{"title":"Counterparty Pool Contract","permalink":"/docs/pools/back-end/sdk/counterparty-pool"},"next":{"title":"Introduction","permalink":"/docs/pools/front-end-ui/"}}');var i=e(4848),a=e(8453);const s={title:"Collateral Pool Contract",sidebar_position:2},r=void 0,l={},c=[{value:"Methods Available",id:"methods-available",level:2},{value:"Admin Methods Available",id:"admin-methods-available",level:2},{value:"Examples",id:"examples",level:2},{value:"Supply to a Pool",id:"supply-to-a-pool",level:3},{value:"Borrowing from a Pool",id:"borrowing-from-a-pool",level:3}];function d(n){const o={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["The ",(0,i.jsx)(o.a,{href:"/docs/introduction/software-development-kit",children:"Defactor SDK"})," provides utilities and classes to seamless interaction with the Defactor contracts. In this specific section, the focus is in the ",(0,i.jsx)(o.a,{href:"/docs/pools/smart-contracts/erc20-collateral-pool-contract/smart-contract-erc20-collateral-pool",children:"Collateral Pool Contract"})," and ",(0,i.jsx)(o.code,{children:"ERC20CollateralPoolV2"})," class, which implements the fundamental methods to interact with the contract in question."]}),"\n",(0,i.jsx)(o.hr,{}),"\n",(0,i.jsx)(o.h2,{id:"methods-available",children:"Methods Available"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-typescript",children:"// Returns the total USDC fees collected.\nasync USDC_FEES_COLLECTED(): Promise<bigint>\n\n// Returns the USDC contract address.\nasync getUsdc(): Promise<string>\n\n// Returns the USDC Oracle contract address.\nasync getUsdcPriceOracle: Promise<string>\n\n// Returns the USDC Sequencer Oracle contract address.\nasync getUsdcSequencerOracle: Promise<string>\n\n// Returns the last time in seconds when the contract was unpaused\nasync getUnpausedTime(): Promise<bigint>\n\nasync getAnnouncedPoolEdit(poolId: bigint): Promise<PoolEditAnnouncement>\n\n// Returns the list of the collateral token addresses\nasync getCollateralTokens(): Promise<Array<string>>\n\n// Returns the total number of pools.\nasync getTotalPools(): Promise<bigint>\n\n// Returns the pool with the given ID.\nasync getPool(poolId: bigint): Promise<Pool>\n\n// Returns a list of pools within the given range.\nasync getPools(offset: bigint, limit: bigint): Promise<Array<Pool>>\n\n// Returns the total supplied amount for a given pool and address.\nasync getTotalLending(poolId: bigint, address: string): Promise<bigint>\n\n// Returns a specific loan position.\nasync getLoan(poolId: bigint, address: string, lendingId: bigint): Promise<Lend>\n\n// Supplies a certain amount of USDC to a pool.\nasync lend(\n  poolId: bigint,\n  usdcAmount: bigint\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Borrows a certain amount of USDC from a pool, specifying the collateral token amount.\nasync borrow(\n  poolId: bigint,\n  usdcAmount: bigint,\n  collateralTokenAmount: bigint\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Returns a specific borrow.\nasync getBorrow(poolId: bigint, borrowerAddress: string, borrowId: bigint): Promise<Borrow>\n\n// Calculates the amount of collateral tokens for a given amount.\nasync calculateCollateralTokenAmount(poolId: bigint, amount: bigint): Promise<bigint>\n\n// Calculates the amount of interest to repay a specified borrow position.\nasync calculateRepayInterest(\n  poolId: bigint,\n  borrowId: bigint,\n  user: string\n): Promise<bigint>\n\n// Repays a borrow with a specified amount.\nasync repay(\n  poolId: bigint,\n  borrowId: bigint,\n  repayAmount: bigint\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Calculate the expected rewards for supplied to a pool.\nasync calculateReward(\n  poolId: bigint,\n  lendId: bigint,\n  user: string\n): Promise<bigint>\n\n// Claims rewards earned by supplies from the pool.\nasync claim(\n  poolId: bigint,\n  claims: Array<{ lendId: bigint; usdcAmount: bigint }>\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Get the liquidatable amount with protocol fees of a specified borrow position.\nasync getLiquidatableAmountWithProtocolFee(\n  poolId: bigint,\n  user: string,\n  borrowId: bigint\n): Promise<bigint>\n\n// Get the current available usdc and collateral token amounts in the pool.\nasync getAvailableAmountsInPool(poolId: bigint): Promise<{  availableUSDC: bigint; availableCollateralTokens: bigint}>\n\n// Get protocol fees for collateral token\nasync getCollateralTokenProtocolFee(\n  collateralToken: string\n): Promise<bigint>\n\n// Check if the borrow position is liquidatable.\nasync isPositionLiquidatable(\n  poolId: bigint,\n  user: string,\n  borrowId: bigint\n): Promise<boolean>\n\n// Calculates the required usdc fee to liquidate a borrow position \nasync calculateRequiredUsdcToLiquidate(\n  poolId: bigint,\n  liquidations: Array<{ borrowId: bigint; user: string; usdcAmount: bigint }>\n): Promise<bigint>\n\n// Liquidates borrow positions based on specified liquidations.\nasync liquidate(\n  poolId: bigint,\n  liquidations: Array<{ borrowId: bigint; user: string; usdcAmount: bigint }>\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Changes the collateral amount for a specific borrow.\nasync changeCollateralAmount(\n  poolId: bigint,\n  borrowId: bigint,\n  newCollateralTokenAmount: bigint,\n  maxCollateralTokenLTVPercentage: bigint\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Claim with interest in collateral tokens from the liquidation of borrow positions\nasync claimCollateral(\n  poolId: bigint,\n  claims: Array<{ lendId: bigint; usdcAmount: bigint }>,\n  liquidations: Array<{ borrowId: bigint; user: string; usdcAmount: bigint }>\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n"})}),"\n",(0,i.jsx)(o.h2,{id:"admin-methods-available",children:"Admin Methods Available"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-typescript",children:"// Adds a new pool.\nasync addPool(pool: PoolInput): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Announce the edition of a pool.\nasync announceEditPool(\n  poolId: bigint,\n  pool: EditPool\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Commits the changes of a edit pool announcement. \nasync commitEditPool(\n  poolId: bigint\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Cancel the changes of a edit pool announcement.\nasync cancelEditPool(\n  poolId: bigint\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n\n// Withdraw the protocol fees rewards\nasync withdrawProtocolRewards(\n  token: string,\n  recipient: string\n): Promise<ethers.ContractTransaction | ethers.TransactionResponse>\n"})}),"\n",(0,i.jsx)(o.hr,{}),"\n",(0,i.jsx)(o.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(o.p,{children:["Import the library and instantiate the ",(0,i.jsx)(o.code,{children:"SelfProvider"})," class with the ",(0,i.jsx)(o.code,{children:"ERC20CollateralPoolV2"})," contract."]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-typescript",children:'import { ERC20CollateralPoolV2, SelfProvider } from "@defactor/defactor-sdk";\n\nconst providerInstance = new SelfProvider.SelfProvider<ERC20CollateralPoolV2>(\n  ERC20CollateralPoolV2,\n  contractConfig.contractAddress!, // loaded from config file\n  contractConfig.providerUrl!, // loaded from config file\n  contractConfig.privateKey! // loaded from config file\n);\n'})}),"\n",(0,i.jsx)(o.h3,{id:"supply-to-a-pool",children:"Supply to a Pool"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-typescript",children:"const poolId = 1;\nconst amount = BigInt(100_000000); // 100 USDC\n\nconst lendTx = await providerInstance.lend(poolId, amount);\nconsole.log(lendTx);\n"})}),"\n",(0,i.jsx)(o.h3,{id:"borrowing-from-a-pool",children:"Borrowing from a Pool"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-typescript",children:"const poolId = 1;\nconst amount = BigInt(10_000000); // 10 USDC\n\nconst borrowTx = await providerInstance.borrow(poolId, amount);\nconsole.log(borrowTx);\n"})})]})}function p(n={}){const{wrapper:o}={...(0,a.R)(),...n.components};return o?(0,i.jsx)(o,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,o,e)=>{e.d(o,{R:()=>s,x:()=>r});var t=e(6540);const i={},a=t.createContext(i);function s(n){const o=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(o):{...o,...n}}),[o,n])}function r(n){let o;return o=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(a.Provider,{value:o},n.children)}}}]);