"use strict";(self.webpackChunkdocus=self.webpackChunkdocus||[]).push([[3153],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},c=i.createContext(s);function a(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(c.Provider,{value:n},e.children)}},8902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"engage/smart-contracts/buyback-contract/buyback-v2-contract-actions","title":"Contract Actions","description":"Buyback.sol is an upgradeable smart contract used to repurchase $FACTR tokens using USDC via Uniswap V3. It supports standard and custom buybacks, applies TWAP-based price checks, and locks acquired FACTR for 1 year before distribution to either predefined vaults or custom addresses.","source":"@site/docs/engage/smart-contracts/buyback-contract/contract-actions.md","sourceDirName":"engage/smart-contracts/buyback-contract","slug":"/engage/smart-contracts/buyback-contract/buyback-v2-contract-actions","permalink":"/docs/engage/smart-contracts/buyback-contract/buyback-v2-contract-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/defactor-com/documentation/tree/main/docs/engage/smart-contracts/buyback-contract/contract-actions.md","tags":[{"inline":true,"label":"Contract Actions","permalink":"/docs/tags/contract-actions"}],"version":"current","sidebarPosition":2,"frontMatter":{"id":"buyback-v2-contract-actions","title":"Contract Actions","sidebar_position":2,"tags":["Contract Actions"]},"sidebar":"docSidebar","previous":{"title":"BuyBack Contract Overview","permalink":"/docs/engage/smart-contracts/buyback-contract/buyback-contract-overview"},"next":{"title":"Buyback Contract Config","permalink":"/docs/engage/smart-contracts/buyback-contract/buyback-contract-configuration"}}');var s=t(4848),c=t(8453);const a={id:"buyback-v2-contract-actions",title:"Contract Actions",sidebar_position:2,tags:["Contract Actions"]},r=void 0,o={},l=[{value:"Dependencies",id:"dependencies",level:2},{value:"Contract: Buyback",id:"contract-buyback",level:2},{value:"Functions",id:"functions",level:3},{value:"Initialization",id:"initialization",level:4},{value:"Standard Buyback",id:"standard-buyback",level:4},{value:"Custom Buyback",id:"custom-buyback",level:4},{value:"Data Retrieval",id:"data-retrieval",level:4},{value:"Utility (Internal)",id:"utility-internal",level:4},{value:"Admin Utility",id:"admin-utility",level:4},{value:"Events",id:"events",level:3},{value:"Custom Errors / Validations",id:"custom-errors--validations",level:3},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Buyback.sol"})," is an upgradeable smart contract used to repurchase $FACTR tokens using USDC via Uniswap V3. It supports standard and custom buybacks, applies TWAP-based price checks, and locks acquired FACTR for 1 year before distribution to either predefined vaults or custom addresses."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["OpenZeppelin Contracts:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Initializable"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Uniswap V3:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ISwapRouter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"IUniswapV3Factory"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"IUniswapV3Pool"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OracleLibrary"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Custom:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"BuybackStorage.sol"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"IERC20"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"contract-buyback",children:"Contract: Buyback"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Inherits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"BuybackStorage"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Initializable"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Uses ",(0,s.jsx)(n.code,{children:"IERC20"})," and Uniswap V3 router for token swaps."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["All FACTR acquired through buybacks is subject to a ",(0,s.jsx)(n.strong,{children:"1-year lockup"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h4,{id:"initialization",children:"Initialization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"initialize"}),": Sets up key contract parameters (e.g., vaults, tokens, routers, cooldowns). Called only once due to ",(0,s.jsx)(n.code,{children:"Initializable"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"standard-buyback",children:"Standard Buyback"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"buyback"}),": Swaps contract-held USDC for FACTR. Can be called after cooldown. Verifies price using TWAP and handles slippage."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"buybackWithdraw"}),": Distributes locked FACTR equally across 4 vaults after a 365-day lock."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"custom-buyback",children:"Custom Buyback"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"customBuyback"}),": Allows anyone to perform a USDC-to-FACTR buyback with a custom distribution array. Enforces cooldown and TWAP constraints."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"customBuybackWithdraw"}),": Distributes locked FACTR to predefined accounts based on basis points after 1 year."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"data-retrieval",children:"Data Retrieval"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fetchActiveLocks"}),": Returns all standard buybacks pending withdrawal."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fetchActiveCustomLocks"}),": Returns all custom buybacks pending withdrawal."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"utility-internal",children:"Utility (Internal)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_sandwichProtectionCheck"}),": Ensures current pool price doesn't deviate >1% from TWAP to prevent sandwich attacks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getOptimalTwapAmountThreshold"}),": Calculates minimum expected output (FACTR) from swap, based on TWAP."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"calculateOptimalAmount"}),": Iteratively finds the optimal USDC input amount for a swap that satisfies TWAP conditions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_executeSwap"}),": Swaps USDC to FACTR using Uniswap router and defined path."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"estimateAmountOut"}),": Returns average price quote from Uniswap based on historical ticks."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"admin-utility",children:"Admin Utility"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recoverERC20"}),": Allows ",(0,s.jsx)(n.code,{children:"RECOVERER"})," to recover non-FACTR and non-USDC tokens mistakenly sent to the contract."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BuybackCall"}),": Emitted after a standard buyback is completed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CustomBuybackCall"}),": Emitted after a custom buyback is completed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Withdraw"}),": Emitted after locked FACTR from a standard buyback is distributed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CustomWithdraw"}),": Emitted after locked FACTR from a custom buyback is distributed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ERC20Recovered"}),": Emitted when admin recovers unrelated tokens from the contract."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-errors--validations",children:"Custom Errors / Validations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Cooldown check via ",(0,s.jsx)(n.code,{children:"coolDownElapsed"})," modifier."]}),"\n",(0,s.jsx)(n.li,{children:"Buybacks require minimum 1000 USDC."}),"\n",(0,s.jsx)(n.li,{children:"Slippage and TWAP thresholds must be met or revert."}),"\n",(0,s.jsx)(n.li,{children:"Custom distribution arrays must sum to 10,000 bps."}),"\n",(0,s.jsx)(n.li,{children:"Withdrawals are only allowed after 365 days have passed."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recoverERC20"})," rejects recovery of FACTR or USDC."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This contract ensures secure, automated buybacks that support token value via liquidity removal and delayed distribution."}),"\n",(0,s.jsx)(n.li,{children:"TWAP-based slippage validation minimizes the risk of manipulation and price impact."}),"\n",(0,s.jsx)(n.li,{children:"Custom buybacks make the contract suitable for DAO-driven or on-demand token redistribution."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);