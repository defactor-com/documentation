"use strict";(self.webpackChunkdocus=self.webpackChunkdocus||[]).push([[6612],{1120:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"pools/smart-contracts/counterparty-pools-contract/counterparty-pools-smart-contract","title":"Introduction","description":"Pools.sol this contract allows users to create, manage, and interact with funding pools using ERC20, ERC721, and ERC1155 tokens.","source":"@site/docs/pools/smart-contracts/counterparty-pools-contract/introduction.md","sourceDirName":"pools/smart-contracts/counterparty-pools-contract","slug":"/pools/smart-contracts/counterparty-pools-contract/counterparty-pools-smart-contract","permalink":"/docs/pools/smart-contracts/counterparty-pools-contract/counterparty-pools-smart-contract","draft":false,"unlisted":false,"editUrl":"https://github.com/defactor-com/documentation/tree/main/docs/pools/smart-contracts/counterparty-pools-contract/introduction.md","tags":[{"inline":true,"label":"ERC20","permalink":"/docs/tags/erc-20"},{"inline":true,"label":"Collateral Pool","permalink":"/docs/tags/collateral-pool"}],"version":"current","sidebarPosition":1,"frontMatter":{"id":"counterparty-pools-smart-contract","title":"Introduction","sidebar_position":1,"tags":["ERC20","Collateral Pool"]},"sidebar":"docSidebar","previous":{"title":"Counterparty Pools","permalink":"/docs/category/counterparty-pools"},"next":{"title":"Technical Aspects","permalink":"/docs/pools/smart-contracts/counterparty-pools-contract/counterparty-pools-technical-aspects"}}');var s=t(4848),l=t(8453);const a={id:"counterparty-pools-smart-contract",title:"Introduction",sidebar_position:1,tags:["ERC20","Collateral Pool"]},r=void 0,i={},c=[{value:"Contract versions",id:"contract-versions",level:2},{value:"Pool",id:"pool",level:2},{value:"Roles",id:"roles",level:2},{value:"admin",id:"admin",level:3},{value:"pool owner (borrower)",id:"pool-owner-borrower",level:3},{value:"create a pool",id:"create-a-pool",level:4},{value:"collect a pool",id:"collect-a-pool",level:4},{value:"deposit rewards",id:"deposit-rewards",level:4},{value:"close a pool",id:"close-a-pool",level:4},{value:"archive a pool",id:"archive-a-pool",level:4},{value:"claim the rewards for users",id:"claim-the-rewards-for-users",level:4},{value:"un-commit from a pool for users",id:"un-commit-from-a-pool-for-users",level:4},{value:"lender (investor)",id:"lender-investor",level:3},{value:"commit to a pool",id:"commit-to-a-pool",level:4},{value:"un-commit from a pool",id:"un-commit-from-a-pool",level:4},{value:"claim rewards",id:"claim-rewards",level:4},{value:"Admin-only version",id:"admin-only-version",level:2}];function d(e){const o={code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.code,{children:"Pools.sol"})," this contract allows users to create, manage, and interact with funding pools using ",(0,s.jsx)(o.code,{children:"ERC20"}),", ",(0,s.jsx)(o.code,{children:"ERC721"}),", and ",(0,s.jsx)(o.code,{children:"ERC1155"})," tokens."]}),"\n",(0,s.jsx)(o.h2,{id:"contract-versions",children:"Contract versions"}),"\n",(0,s.jsxs)(o.p,{children:["This contract has two versions, the first one is the ",(0,s.jsx)(o.code,{children:"default"})," version where anyone can create a pool by paying 200 tokens in the base token of the contract. On the other hand, the second version only allows the creation of the pool to the contract admin who is the only borrower."]}),"\n",(0,s.jsxs)(o.p,{children:["First, the version where anyone can create their pools will be detailed, and at the end the differences with the ",(0,s.jsx)(o.code,{children:"admin-only"})," version will be contrasted."]}),"\n",(0,s.jsx)(o.h2,{id:"pool",children:"Pool"}),"\n",(0,s.jsx)(o.p,{children:"The pool is a structure that keeps track of total committed, total rewarded, who the borrower is (pool creator), and other information that are essential for the proper functioning of the contract."}),"\n",(0,s.jsx)(o.p,{children:"The pool has some important characteristics:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["Every pool has a soft cap, hard cap, a deadline, and a minimum APR. The soft cap will be the minimum amount of funds that the pool must reach to be considered ",(0,s.jsx)(o.code,{children:"ACTIVE"}),". The hard cap will be the maximum amount of funds that the pool can reach, the deadline is the maximum time that the pool can be open to receive funds and be rewarded by the borrower, and, finally the minimum APR is the interest applied to the total committed that the deposited rewards must exceed to close the pool. If the pool owner (the borrower) tries to collect the pool before reaching the soft cap, the contract will return an error reverting the transaction but it will also no only restrict the pool owner of collecting the funds but also the lender if they try to un-commit from the pool before it reaches the soft cap. On the other hand, the hard cap will be used to revert transactions if a lender tries to commit to a pool and it overpasses the hard cap and also the deadline will be used to revert transactions if someone tries to collect, archive, commit, un-commit at a wrong time."]}),"\n",(0,s.jsxs)(o.li,{children:["This pool has the advantage of receiving 3 types of tokens as collateral that follows the ",(0,s.jsx)(o.code,{children:"ERC20"}),", ",(0,s.jsx)(o.code,{children:"ERC721"})," and ",(0,s.jsx)(o.code,{children:"ERC1155"})," standards. The pool owner can provide as much collateral as they want at the same time to the same pool."]}),"\n",(0,s.jsxs)(o.li,{children:["When a pool is created its default status is ",(0,s.jsx)(o.code,{children:"CREATED"}),", and then when it reaches the soft cap and the owner collects it, the pool status will be changed to ",(0,s.jsx)(o.code,{children:"ACTIVE"}),", later when the owner decides to close it, the pool status will be updated to ",(0,s.jsx)(o.code,{children:"CLOSED"})," and finally, when the pool is archived, the pool status will be ",(0,s.jsx)(o.code,{children:"ARCHIVED"}),". All of these status changes are made by trigger events."]}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"roles",children:"Roles"}),"\n",(0,s.jsx)(o.p,{children:"The smart contract caters to three types of users: the infrastructure provider which is the admin of the contract, the pool owner that can be interpreted as the borrower and the lender that is the account that lends the money to the pool."}),"\n",(0,s.jsx)(o.h3,{id:"admin",children:"admin"}),"\n",(0,s.jsx)(o.p,{children:"When a new instance of this contract is deployed, the sender will be by default the admin of the contract and will have the responsibility to collect the fees that the contract collects, withdraw all USDC funds the contract has and pause and unpause the contract for security reasons."}),"\n",(0,s.jsx)(o.h3,{id:"pool-owner-borrower",children:"pool owner (borrower)"}),"\n",(0,s.jsx)(o.p,{children:"The pool owner is in charge of managing its own pool. It can create a new pool, collect the funds from the pool, close the pool and archive the pool. It can also deposit rewards to the pool."}),"\n",(0,s.jsx)(o.h4,{id:"create-a-pool",children:"create a pool"}),"\n",(0,s.jsx)(o.p,{children:"Every user can create a pool and will be considered as the pool owner. A charge of $200 is required to cover the fees for the infrastructure maintenance. Also, the deadline cannot be more than one year in the future."}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Create Pool",src:t(7872).A+"",width:"2358",height:"4892"})}),"\n",(0,s.jsx)(o.h4,{id:"collect-a-pool",children:"collect a pool"}),"\n",(0,s.jsxs)(o.p,{children:["This action allows the pool owner to collect the funds from the pool. A pool can only be collected once when the pool status is still ",(0,s.jsx)(o.code,{children:"CREATED"})," and both the soft cap and the deadline were reached. The contract will charge a 2% fee of the total committed. If the pool owner tries to collect the funds before reaching the soft cap or collecting it twice, the transaction will be reverted."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Collect Pool",src:t(796).A+"",width:"2506",height:"6858"})}),"\n",(0,s.jsx)(o.h4,{id:"deposit-rewards",children:"deposit rewards"}),"\n",(0,s.jsxs)(o.p,{children:["When the collection phase is over, the borrower (pool owner) will have to pay the taken loan by depositing the rewards to the pool when the pool status is still ",(0,s.jsx)(o.code,{children:"ACTIVE"}),"."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Deposit Rewards",src:t(6528).A+"",width:"2208",height:"3974"})}),"\n",(0,s.jsx)(o.h4,{id:"close-a-pool",children:"close a pool"}),"\n",(0,s.jsx)(o.p,{children:"A pool owner can close the pool anytime if one of the following conditions are meet:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["Pool is ",(0,s.jsx)(o.code,{children:"CREATED"})," and the max collect time of 30 days after deadline has passed"]}),"\n",(0,s.jsxs)(o.li,{children:["Pool is ",(0,s.jsx)(o.code,{children:"CREATED"})," the deadline was reached and the soft cap was not reached"]}),"\n",(0,s.jsxs)(o.li,{children:["Pool is ",(0,s.jsx)(o.code,{children:"ACTIVE"})," and the total rewards are equal to or greater than the total committed in the pool plus the configured interest, adjusted by ",(0,s.jsx)(o.code,{children:"INTEREST_DECIMAL_PLACES = 100_000_000"}),". To calculate this, refer to the following formula:"]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-solidity",children:"pool.totalCommitted + (pool.totalCommitted * pool.minimumAPR) / INTEREST_DECIMAL_PLACES\n"})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Close Pool",src:t(8782).A+"",width:"2830",height:"5536"})}),"\n",(0,s.jsx)(o.h4,{id:"archive-a-pool",children:"archive a pool"}),"\n",(0,s.jsxs)(o.p,{children:["A pool can be archived by two roles, the pool owner and the contract admin but for both roles all rewards must have been claimed and the pool needs to be ",(0,s.jsx)(o.code,{children:"CLOSED"})," or ",(0,s.jsx)(o.code,{children:"CREATED"}),". If the pool status is ",(0,s.jsx)(o.code,{children:"CLOSED"}),", then a minimum of ",(0,s.jsx)(o.code,{children:"pool closed time + 60 days"})," needs to be passed to archive the pool. If the pool status is ",(0,s.jsx)(o.code,{children:"CREATED"}),", then the total committed must be zero and a minimum of ",(0,s.jsx)(o.code,{children:"pool deadline + 60 days"})," needs to be passed to archive the pool, otherwise the transaction will be reverted."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Archive Pool",src:t(9944).A+"",width:"2452",height:"6624"})}),"\n",(0,s.jsx)(o.h4,{id:"claim-the-rewards-for-users",children:"claim the rewards for users"}),"\n",(0,s.jsxs)(o.p,{children:["This function can be performed by two roles, the pool owner and the contract admin. It allows claims rewards for users only available when the pool status is ",(0,s.jsx)(o.code,{children:"CLOSED"})," and more than 60 days has passed after pool closing."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Claim rewards for users",src:t(1843).A+"",width:"2358",height:"4544"})}),"\n",(0,s.jsx)(o.h4,{id:"un-commit-from-a-pool-for-users",children:"un-commit from a pool for users"}),"\n",(0,s.jsxs)(o.p,{children:["This function can be performed by two roles, the pool owner and the contract admin. It allows un-commit for users only available when the pool status is ",(0,s.jsx)(o.code,{children:"CREATED"})," and more than 60 days has passed after pool deadline."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Un-commit Pool for users",src:t(3711).A+"",width:"2358",height:"4544"})}),"\n",(0,s.jsx)(o.h3,{id:"lender-investor",children:"lender (investor)"}),"\n",(0,s.jsx)(o.p,{children:"The lender is in charge of lending money to the pools. It can commit to a pool, un-commit from a pool and claim rewards from a pool."}),"\n",(0,s.jsx)(o.h4,{id:"commit-to-a-pool",children:"commit to a pool"}),"\n",(0,s.jsxs)(o.p,{children:["This action allows the lender to invest in a pool and is only available when the pool status is ",(0,s.jsx)(o.code,{children:"CREATED"})," and both the hard cap and the deadline were not reached. If the lender tries to commit to a pool that has reached the hard cap or the pool status is not ",(0,s.jsx)(o.code,{children:"CREATED"}),", the transaction will be reverted."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Commit To Pool",src:t(380).A+"",width:"2432",height:"4990"})}),"\n",(0,s.jsx)(o.h4,{id:"un-commit-from-a-pool",children:"un-commit from a pool"}),"\n",(0,s.jsxs)(o.p,{children:["It allows the lender (investor) to un-commit from a pool and is only available when the pool status is ",(0,s.jsx)(o.code,{children:"CREATED"}),". The lender can un-commit from a pool if the max collect time of 30 days after the deadline has passed or when either soft cap or deadline were not reached. Otherwise, the transaction will be reverted."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Un-Commit From Pool",src:t(4534).A+"",width:"2762",height:"4712"})}),"\n",(0,s.jsx)(o.h4,{id:"claim-rewards",children:"claim rewards"}),"\n",(0,s.jsxs)(o.p,{children:["Once the owner has collected the funds from the pool, the lender will be able to claim the rewards. This action can only be called when the pool status is ",(0,s.jsx)(o.code,{children:"CLOSED"})," or ",(0,s.jsx)(o.code,{children:"ACTIVE"}),". To calculate the rewards, refer to the following formula:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-solidity",children:"((pool.totalRewards * poolCommit.amount) / pool.totalCommitted) - poolCommit.claimedAmount\n"})}),"\n",(0,s.jsx)(o.p,{children:"In simple words it means, the rewards is equal to the percentage of the amount lent times the total rewards minus the amount already claimed."}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pools Claim",src:t(9156).A+"",width:"2484",height:"3912"})}),"\n",(0,s.jsx)(o.h2,{id:"admin-only-version",children:"Admin-only version"}),"\n",(0,s.jsx)(o.p,{children:"In this version of the counterparty pools the admin is the only borrower and therefore the only one who can create pools. The differences with the default version are listed below:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["The following actions can only be perform by the admin:","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.code,{children:"createPool"})}),"\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.code,{children:"collectPool"})}),"\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.code,{children:"depositRewards"})}),"\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.code,{children:"closePool"})}),"\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.code,{children:"archivePool"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(o.li,{children:"The 200 token fee is not required to create a pool."}),"\n",(0,s.jsxs)(o.li,{children:["The pool can be collected at any time as long as the pool status is ",(0,s.jsx)(o.code,{children:"CREATED"}),"."]}),"\n",(0,s.jsxs)(o.li,{children:["A ",(0,s.jsx)(o.code,{children:"CREATED"})," pool cannot be closed or archived."]}),"\n",(0,s.jsxs)(o.li,{children:["To close a pool the status must be ",(0,s.jsx)(o.code,{children:"ACTIVE"})," and the total rewards are equal to or greater than the total committed in the pool plus the configured interest."]}),"\n",(0,s.jsxs)(o.li,{children:["To archive a pool all rewards must have been claimed, the pool needs to be ",(0,s.jsx)(o.code,{children:"CLOSED"}),", and a minimum of pool ",(0,s.jsx)(o.code,{children:"closed time + 60 days"})," needs to be passed to archive the pool."]}),"\n",(0,s.jsxs)(o.li,{children:["The actions ",(0,s.jsx)(o.code,{children:"uncommitFromPool"})," and ",(0,s.jsx)(o.code,{children:"uncommitForUsers"})," are not supported."]}),"\n"]})]})}function h(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},9944:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_archivepool-8dd31873d984ae16a79cda027e8d7151.png"},9156:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_claim-23f4ce9f7f95887b0a375721143b9710.png"},1843:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_claimforusers-457416056b1cc892c16df20d8944c6e0.png"},8782:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_closepool-64e6ad8f9aadfa525c1cc11dee461713.png"},796:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_collectpool-655c142afb224b423ae4572a55a8f00d.png"},380:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_committopool-7404178a753b0c22e78ba06496155137.png"},7872:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_createpool-55f92006ba0a35768b47d1fd0f0348be.png"},6528:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_depositrewards-8349edbf2e56f64aa710f82394eb24fc.png"},3711:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_uncommitforusers-ca374e43c0a7fbffe4db8c566d30c057.png"},4534:(e,o,t)=>{t.d(o,{A:()=>n});const n=t.p+"assets/images/Pools_uncommitfrompool-129632d650aa5eed086519a9990b125a.png"},8453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>r});var n=t(6540);const s={},l=n.createContext(s);function a(e){const o=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(l.Provider,{value:o},e.children)}}}]);